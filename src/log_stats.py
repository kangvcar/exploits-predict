"""
/src/log_stats.py
Module for run script statistic classes.
"""
import os
import logging
import logging.handlers
from dateutil.parser import parse


class RunStats:
    
    def __init__(self):
        
        self._init_logger()
        
        
    def _init_logger(self):
        # Script Logging Config
        self._logger = logging.getLogger(os.path.basename(__file__) 
                                   if "__file__" in globals() else "no_cli_run")
        self._logger.setLevel(logging.DEBUG)
        logger_file_handler = logging.handlers.RotatingFileHandler(
            "status.log",
            maxBytes=1024 * 1024,
            backupCount=1,
            encoding="utf8",
        )
        formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
        logger_file_handler.setFormatter(formatter)
        self._logger.addHandler(logger_file_handler)


class RunStatsDBUpdate(RunStats):
    
    def __init__(self):
        
        super().__init__()
        
        self._cve = {
            "before_db_count": None,
            "before_db_frozen_count": None,
            "from_api_count": None,
            "new_last_modified": None,
            "after_db_count": None,
            "after_db_frozen_count": None,
            "error_message": None,
        }
        self._exploits = {
            "before_db_count": None,
            "from_api_count": None,
            "new_last_modified": None,
            "after_db_count": None,
            "error_message": None,
        }
            
    def set_db_stats_before(self, db):
        
        self._exploits["before_db_count"] = db.safe_read_query("""
        SELECT COUNT(exploit_id)
        FROM exploit;
        """)[0][0]

        self._cve["before_db_count"] = db.safe_read_query("""
        SELECT COUNT(cve_id), COUNT(cve_id)
        FROM cve;
        """)[0][0]

        self._cve["before_db_frozen_count"] = db.safe_read_query("""
        SELECT COUNT(cve_id)
        FROM cve
        WHERE NOT frozen_mode_date IS Null;
        """)[0][0]
        
    def set_db_stats_after(self, db):
    
        self._exploits["after_db_count"] = db.safe_read_query("""
        SELECT COUNT(exploit_id)
        FROM exploit;
        """)[0][0]

        self._cve["after_db_count"] = db.safe_read_query("""
        SELECT COUNT(cve_id), COUNT(cve_id)
        FROM cve;
        """)[0][0]

        self._cve["after_db_frozen_count"] = db.safe_read_query("""
        SELECT COUNT(cve_id)
        FROM cve
        WHERE NOT frozen_mode_date IS Null;
        """)[0][0]
        
    def set_api_stats_exploits(self, exploits_dict, error_message=None):
        
        self._exploits["from_api_count"] = len(exploits_dict["id"])
        self._exploits["new_last_modified"] = max(map(parse, exploits_dict["modified"])) \
                                              if exploits_dict["modified"] else None
        self._exploits["error_message"] = error_message
        
    def set_api_stats_cve(self, cve_dict, error_message=None):
        
        self._cve["from_api_count"] = len(cve_dict["id"])
        self._cve["new_last_modified"] = max(map(parse, cve_dict["lastModified"])) \
                                              if cve_dict["lastModified"] else None
        self._cve["error_message"] = error_message
        
        
    def get_dbupdate_stats_write_sql_query(self):

        if self._cve["error_message"] or self._exploits["error_message"]:
            final_error_message = "CVE: {}; EXPLOITS: {}".format(
                self._cve["error_message"], self._exploits["error_message"]
            )
        else:
            final_error_message = "no errors"

        print(f"Final error messsage: {final_error_message}")

        
        dbupdate_stats_row = {
            "cve_count": self._cve["from_api_count"],
            "exploit_count": self._exploits["from_api_count"],
            "cve_lastModified": self._cve["new_last_modified"],
            "exploit_modified": self._exploits["new_last_modified"],
            "error_message": final_error_message,
        }

        sql_query = (
            """
        INSERT INTO dbupdate_stats
            (script_run_date, cve_lastModified, exploit_modified,
             cve_count, exploit_count, error_message)
        VALUES (
            datetime('now'),
            :cve_lastModified,
            :exploit_modified,
            :cve_count,
            :exploit_count,
            :error_message
        )
        """,
            [dbupdate_stats_row],
        )

        return sql_query
    
    def write_final_log(self):
        
        log_message = "CVE: +{} from api, +{} insert, +{} frozen; Exploits: +{} from api, +{} insert.".format(
            self._cve["from_api_count"],
            self._cve["after_db_count"] - self._cve["before_db_count"],
            self._cve["after_db_frozen_count"] - self._cve["before_db_frozen_count"],
            self._exploits["from_api_count"],
            self._exploits["after_db_count"] - self._exploits["before_db_count"],

        )
        
        self._logger.info(log_message)
        